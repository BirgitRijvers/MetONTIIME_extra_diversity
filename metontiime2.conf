 params{
	//Path to working directory including fastq.gz files
	workDir="/path/to/workDir"
	//Path to sample metadata tsv file; if it doesn't exist yet, it is created at runtime
	sampleMetadata="/path/to/sample-metadata.tsv"
	//Path to database file with sequences in fasta format
	dbSequencesFasta="/path/to/sequence.fasta"
	//Path to database file with sequence id-to-taxonomy correspondence in tsv format
	dbTaxonomyTsv="/path/to/taxonomy.tsv"
	//Name of database file with sequences as QIIME2 artifact (qza); if it is already available, it should be put in resultsDir/importDb
	dbSequencesQza="db_sequences.qza"
	//Name of database file with sequence id-to-taxonomy correspondence as QIIME2 artifact (qza); if it is already available, it should be put in resultsDir/importDb
	dbTaxonomyQza="db_taxonomy.qza"
	//Taxonomy classifier, available: VSEARCH, Blast
	classifier="Blast"
	//maxNumReads is the maximum number of reads per sample; if one sample has more than maxNumReads, random downsampling is performed
	maxNumReads=50000
	//minReadLength is the minimum length (bp) for a read to be retained
	minReadLength=1400
	//maxReadLength is the maximum length (bp) for a read to be retained
	maxReadLength=1700
	//minQual is the minimum average PHRED score for a read to be retained
	minQual=8
	//Number of bases to be trimmed at both ends
	extraEndsTrim=0
	//Identity for de novo clustering [0-1]
	clusteringIdentity=0.6
	//Maximum number of candidate hits for each read, to be used for consensus taxonomy assignment
	maxAccepts=3
	//Minimum fraction of assignments must match top hit to be accepted as consensus assignment [0.5-1]
    	minConsensus=0.6
	//Minimum query coverage for an alignment to be considered a candidate hit [0-1]
	minQueryCoverage=0.6
	//Minimum alignment identity for an alignment to be considered a candidate hit [0-1]
	minIdentity=0.6
	//Taxonomy level at which you want to perform non-phylogeny-based diversity analyses
	taxaLevelDiversity=7
	//Max num. reads for diversity analyses
	numReadsDiversity=50000
	//Taxa of interest that you want to retain and to focus the analysis on
	taxaOfInterest=""
	//Minimum number of reads assigned to Taxa of interest to retain a sample
	minNumReadsTaxaOfInterest=1
	//Path to directory containing results
	resultsDir="/path/to/resultsDir"

	help=false

	// Flags to select which process to run
	concatenateFastq = false
	filterFastq = true
	downsampleFastq = true
	importFastq = true
	dataQC = true
	importDb = true
	derepSeq = true
	assignTaxonomy = true
	taxonomyVisualization = true
	collapseTables = true
	filterTaxa = false
	diversityAnalyses = true
}

tower {
	enabled = true
	endpoint = '-'
	accessToken = 'Enter_token_here'
}

profiles {
	singularity {
		singularity.enabled = true
		singularity.autoMounts = false
		//singularity.cacheDir = "/path/to/singularity/cacheDir" // if commented, work dir is going to be usedd
		process{
			containerOptions = '--bind /home/:/home'
			cpus = 1
			executor = 'pbspro'
			queue = 'workq'
			perJobMemLimit = true
		withName:concatenateFastq{
			container = 'maestsi/metontiime:latest'
			cpus = { params.concatenateFastq ? 6 : 1 }
			memory = { params.concatenateFastq ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:filterFastq{
			container = 'maestsi/metontiime:latest'
			cpus = { params.filterFastq ? 6 : 1 }
			memory = { params.filterFastq ? 5.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:downsampleFastq{
			container = 'maestsi/metontiime:latest'
			cpus = { params.downsampleFastq ? 6 : 1 }
			memory = { params.downsampleFastq ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:importFastq{
			container = 'maestsi/metontiime:latest'
			cpus = { params.importFastq ? 6 : 1 }
			memory = { params.importFastq ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:dataQC{
			container = 'maestsi/metontiime:latest'
			cpus = { params.dataQC ? 6 : 1 }
			memory = { params.dataQC ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:importDb{
			container = 'maestsi/metontiime:latest'
			cpus = { params.importDb ? 6 : 1 }
			memory = { params.importDb ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:derepSeq{
			container = 'maestsi/metontiime:latest'
			cpus = { params.derepSeq ? 6 : 1 }
			memory = { params.derepSeq ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:assignTaxonomy{
			container = 'maestsi/metontiime:latest'
			cpus = { params.assignTaxonomy ? 6 : 1 }
			memory = { params.assignTaxonomy ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:taxonomyVisualization{
			container = 'maestsi/metontiime:latest'
			cpus = { params.taxonomyVisualization ? 6 : 1 }
			memory = { params.taxonomyVisualization ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:collapseTables{
			container = 'maestsi/metontiime:latest'
			cpus = { params.collapseTables ? 6 : 1 }
			memory = { params.collapseTables ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:filterTaxa{
			container = 'maestsi/metontiime:latest'
			cpus = { params.filterTaxa ? 6 : 1 }
			memory = { params.filterTaxa ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:diversityAnalyses{
			container = 'maestsi/metontiime:latest'
			cpus = { params.diversityAnalyses ? 6 : 1 }
			memory = { params.diversityAnalyses ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
	}
}

docker {
	    docker.enabled = true
	    docker.autoMounts = false
	    //docker.cacheDir = "/path/to/docker/cacheDir" // if commented, work dir is going to be used
	    process{
			containerOptions = '-v /home/:/home -v /mnt:/mnt'
			cpus = 20
			executor = 'local'
			perJobMemLimit = true
		withName:concatenateFastq{
			container = 'maestsi/metontiime:latest'
			cpus = { params.concatenateFastq ? 20 : 1 }
			memory = { params.concatenateFastq ? 20.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:filterFastq{
			container = 'maestsi/metontiime:latest'
			cpus = { params.filterFastq ? 20 : 1 }
			memory = { params.filterFastq ? 20.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:downsampleFastq{
			container = 'maestsi/metontiime:latest'
			cpus = { params.downsampleFastq ? 20 : 1 }
			memory = { params.downsampleFastq ? 20.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:importFastq{
			container = 'maestsi/metontiime:latest'
			cpus = { params.importFastq ? 20 : 1 }
			memory = { params.importFastq ? 20.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:dataQC{
			container = 'maestsi/metontiime:latest'
			cpus = { params.dataQC ? 20 : 1 }
			memory = { params.dataQC ? 20.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:importDb{
			container = 'maestsi/metontiime:latest'
			cpus = { params.importDb ? 20 : 1 }
			memory = { params.importDb ? 20.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:derepSeq{
			container = 'maestsi/metontiime:latest'
			cpus = { params.derepSeq ? 20 : 1 }
			memory = { params.derepSeq ? 20.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:assignTaxonomy{
			container = 'maestsi/metontiime:latest'
			cpus = { params.assignTaxonomy ? 20 : 1 }
			memory = { params.assignTaxonomy ? 20.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:taxonomyVisualization{
			container = 'maestsi/metontiime:latest'
			cpus = { params.taxonomyVisualization ? 20 : 1 }
			memory = { params.taxonomyVisualization ? 20.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:collapseTables{
			container = 'maestsi/metontiime:latest'
			cpus = { params.collapseTables ? 20 : 1 }
			memory = { params.collapseTables ? 20.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:filterTaxa{
			container = 'maestsi/metontiime:latest'
			cpus = { params.filterTaxa ? 20 : 1 }
			memory = { params.filterTaxa ? 20.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:diversityAnalyses{
			container = 'maestsi/metontiime:latest'
			cpus = { params.diversityAnalyses ? 20 : 1 }
			memory = { params.diversityAnalyses ? 20.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
	}
  }
}
